# Section 4: Food Tracker App

## 28) Demo

This lesson gives a brief overview of what the app we're building in this section.
It's a food tracker that visualizes a list of dates, and it shows the calories and macros for each day and have the functionality to add food for a day as well as view all the foods eaten on a given day.
It also saves previously added foods for quick access for adding again later on.

## 29) The Starting HTML Files:

This section covers downloading the starting html files for this particular web app, alongside this is also a deeper look into the functionalities and what we're starting out with functionality wise on the html files.

## 30) Adding Templates

We're starting out with some basic flask setup.
Then we'll get 3 routes initialized to match up with the 3 html file pages that'll be on the app.
Once the routes are set up and loading successfully, we'll add in the css files for styling.
To add the css files, we create the static folder in our working directory and add them to it.
We'll also be updating the templates to look for the CSS file:
    "<link href="{{ url_for('static', filename='bootstrap.min.css') }} rel="styleshoot">"
    "<link href="{{ url_for('static', filename='theme.css') }}>"
With this we'll save and reload the app to check that the styling is coming through on all 3 html files.

## 31) Creating the Database:

At this point we'll need to create the database as the entire functionality of this app relies on a database to work.
This time we're going to be creating the database and it's tables in a different manner.
We'll have 3 tables, one for keeping track of the dates in the app, a list of all the foods that have been added, and then one to 
track when a food gets applied to a date.
Now in the file that'll create the tables, we'll write the code to create the tables:
    "create table table_name (
        column_name column_params
    )"
We'll save the file as 'food_tracker.sql'
If we want to create a primary key that is the combination of 2 other columns, when creating the table, we use the following code:
    "primary key(column1, column2, ...)"
Now in the terminal, we'll create a database named "food_log.db":
    "sqlite3 food_log.db < food_tracker.sql"
So in the video the above code is used, however it doesn't work in a windows powershell terminal, so instead we'll use:
    "cat filename.sql | sqlite3 dbname.db"
Then once the database has been created, we'll verify that the tables were created and that we can access the tables even if there's nothing in them yet.

## 32) Adding Database Helpers:

We'll now add the code for actually working with the database.
This includes the connect_db and get_db functions for getting the db connection to be able to execute queries on it, 
as well as the app.teardown to close the db after every route has finished executing.
And we'll import the libraries we need for these functions.
Lastly we'll load all the pages as a quick test to check there's no issue with the code.

## 33) Working with the Food Form:

